// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Generates match statistics including total points scored, service winners, and fault percentages.
 *
 * - generateMatchStatistics - A function that handles the generation of match statistics.
 * - MatchStatisticsInput - The input type for the generateMatchStatistics function.
 * - MatchStatisticsOutput - The return type for the generateMatchStatistics function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const MatchStatisticsInputSchema = z.object({
  player1Name: z.string().describe('Name of player 1'),
  player2Name: z.string().describe('Name of player 2'),
  player1Points: z.number().describe('Total points scored by player 1'),
  player2Points: z.number().describe('Total points scored by player 2'),
  player1ServiceWinners: z.number().describe('Number of service winners by player 1'),
  player2ServiceWinners: z.number().describe('Number of service winners by player 2'),
  player1Faults: z.number().describe('Number of faults by player 1'),
  player2Faults: z.number().describe('Number of faults by player 2'),
});
export type MatchStatisticsInput = z.infer<typeof MatchStatisticsInputSchema>;

const MatchStatisticsOutputSchema = z.object({
  summary: z.string().describe('A summary of the match statistics, including key performance indicators for each player.'),
});
export type MatchStatisticsOutput = z.infer<typeof MatchStatisticsOutputSchema>;

export async function generateMatchStatistics(input: MatchStatisticsInput): Promise<MatchStatisticsOutput> {
  return generateMatchStatisticsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'matchStatisticsPrompt',
  input: {schema: MatchStatisticsInputSchema},
  output: {schema: MatchStatisticsOutputSchema},
  prompt: `You are an expert badminton statistician.

  Given the following match data, generate a comprehensive summary of the match statistics, including key performance indicators for each player.

  Player 1 Name: {{{player1Name}}}
  Player 2 Name: {{{player2Name}}}
  Player 1 Points: {{{player1Points}}}
  Player 2 Points: {{{player2Points}}}
  Player 1 Service Winners: {{{player1ServiceWinners}}}
  Player 2 Service Winners: {{{player2ServiceWinners}}}
  Player 1 Faults: {{{player1Faults}}}
  Player 2 Faults: {{{player2Faults}}}

  Provide insights into each player's strengths and weaknesses based on the data.
  Indicate which player has better performance based on key metrics.
  The summary should be concise and easy to understand.
  `,
});

const generateMatchStatisticsFlow = ai.defineFlow(
  {
    name: 'generateMatchStatisticsFlow',
    inputSchema: MatchStatisticsInputSchema,
    outputSchema: MatchStatisticsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
